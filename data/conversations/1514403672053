{"id":"1514403672053","creatorId":"TestUser","createdDate":"2017-12-27T19:41:12.053Z","version":"1514403672053","type":"ConversationNodeType","statement":"My Second Conversation","details":"<p>This one is testing the latest updates, where we added to nodes:</p>\r\n\r\n<ul>\r\n\t<li><span style=\"font-family:Courier New,Courier,monospace\">creatorId</span></li>\r\n\t<li><span style=\"font-family:Courier New,Courier,monospace\">createdDate</span></li>\r\n\t<li><span style=\"font-family:Courier New,Courier,monospace\">version</span></li>\r\n</ul>\r\n\r\n<p><span style=\"font-family:Courier New,Courier,monospace\">version</span> is there to support the eventual implementation of&nbsp;<em>optimistic locking.</em></p>\r\n\r\n<p><a href=\"https://en.wikipedia.org/wiki/Optimistic_concurrency_control\">Wikipedia</a>&nbsp;says this about optimistic locking:</p>\r\n\r\n<blockquote>\r\n<p><strong>Optimistic concurrency control</strong>&nbsp;(<strong>OCC</strong>) is a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Concurrency_control\" title=\"Concurrency control\">concurrency control</a>&nbsp;method applied to transactional systems such as&nbsp;<a href=\"https://en.wikipedia.org/wiki/Relational_database_management_systems\" title=\"Relational database management systems\">relational database management systems</a>and&nbsp;<a href=\"https://en.wikipedia.org/wiki/Software_transactional_memory\" title=\"Software transactional memory\">software transactional memory</a>. OCC assumes that multiple transactions can frequently complete without interfering with each other. While running, transactions use data resources without acquiring locks on those resources. Before committing, each transaction verifies that no other transaction has modified the data it has read. If the check reveals conflicting modifications, the committing transaction rolls back and can be restarted.</p>\r\n</blockquote>\r\n\r\n<p>&nbsp;</p>\r\n","rootNode":{"id":"1514403672045","type":"AnswerNodeType","statement":"The world is flat"}}